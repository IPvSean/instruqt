slug: getting-started-ansible-navigator
id: edt5xzxm8ld5
type: track
title: Getting started with ansible-navigator
teaser: In this lab, we'll install ansible-navigator and take a closer look at the
  command line
description: |+
  <img src="https://github.com/ansible/instruqt/blob/devel/assets/logos/Logo-Red_Hat-Ansible_Automation_Platform-A-Standard-RGB.png?raw=true" alt="drawing" style=";width:400px"/>
  <br>

  # Automation content navigator (ansible-navigator)
  * * *
  <br>

  [`ansible-navigator`](https://github.com/ansible/ansible-navigator) is the new command-line tool that provides a more cohesive and consistent experience for automation creators.


  [`ansible-navigator`](https://github.com/ansible/ansible-navigator) is included in Ansible Automation Platform 2 and leverages your existing CLI knowledge (`ansible-playbook`) while also introducing enhancements for containerized execution.


  In this series of challenges, we'll install [`ansible-navigator`](https://github.com/ansible/ansible-navigator) and run through simple use-cases to highlight it's functionality and enhancements.


icon: https://raw.githubusercontent.com/ansible/instruqt/devel/assets/icons/navigator/Product_icon-Red_Hat-Ansible-Automation_content_navigator-RGB.png
level: beginner
tags:
- aap
- ansible
- ' ansible-navigator'
- aap2
- creator
- developer
owner: redhat
developers:
- colin@redhat.com
private: true
published: true
maintenance: true
show_timer: true
skipping_enabled: true
challenges:
- slug: ansible-navigator-intro
  id: rhdswz55nmob
  type: challenge
  title: Introduce the environment
  teaser: In this challenge, we'll explore the navigator and code-editor environment
  notes:
  - type: text
    contents: |-
      [`ansible-navigator`](https://github.com/ansible/ansible-navigator) is a textual user interface (TUI) available to Ansible Automation Platform subscribers and has been introduced with Ansible Automation Platform 2 as the primary interface for creating and testing ansible automation.
      <br><br><br>
      `ansible-navigator` also functions as a drop-in replacement for `ansible-playbook`, among other `ansible-*` utilities, and is the standard way of executing automation moving into Ansible Automation Platform 2.
  assignment: |
    `ansible-navigator` has been built to fit into common developer workflows and will be used from within the [`code-server`](https://github.com/cdr/code-server) integrated terminal. ***Note that `code-server` is not packaged with Ansible Automation Platform and is not at all affilliated with Red Hat***

    Open the integrated terminal `Terminal > New Terminal` and:


    **1.** Quickly test that navigator has been installed, run:
    ```
    ansible-navigator --help
    ```

    ***

    **2.** Now that we know `ansible-navigator` was installed succesfully, try writing a quick playbook called `test.yml` to ping localhost. It could look something like this:
    ```
    ---
    - name: this is just a test
      hosts: localhost
      gather_facts: true
      tasks:

      - name: ping test
        ping:
    ```

    **3.** Now, run it with `ansible-navigator`:
    ```
    ansible-navigator run ./test.yml -m stdout
    ```
    <br>
    You should be looking at something like this (and looking very much like `ansible-playbook` output):

    ```
    [rhel@code-server ~]$ ansible-navigator run ./test.yml -m stdout
    [WARNING]: provided hosts list is empty, only localhost is available. Note that
    the implicit localhost does not match 'all'

    PLAY [this is just a test] *****************************************************

    TASK [Gathering Facts] *********************************************************
    ok: [localhost]

    TASK [ping test] ***************************************************************
    ok: [localhost]

    PLAY RECAP *********************************************************************
    localhost                  : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0
    ```
    <br>

    ***
    **Note:** `-m stdout` will run in standard out mode which will display execution results just like `ansible-playbook`
  tabs:
  - title: code-server
    type: service
    hostname: code-server
    path: /editor/?folder=vscode-remote%3A%2F%2F%2fhome%2Frhel
    port: 80
  difficulty: basic
  timelimit: 450
- slug: ansible-navigator-explore-ui
  id: cjpyrstazxxx
  type: challenge
  title: Exploring the ansible-navigator interface
  teaser: This challenge will explore the [`ansible-navigator`](https://github.com/ansible/ansible-navigator)
    user interface
  notes:
  - type: text
    contents: |-
      # The *ansible-navigator* interface
      <br><br>
      ### Improved developer experience
      --------
      [`ansible-navigator`](https://github.com/ansible/ansible-navigator) provides a context-aware user interface improving the development and testing experience for creators. It offers integration with Ansible documentation, IDEs (e.g. VScode) and a more prescriptive approach to creating automation
      <br><br>
      ## Enhanced navigation
      ---------------
      [`ansible-navigator`](https://github.com/ansible/ansible-navigator) makes it easier to navigate and filter through playbook outputs.
  assignment: |-
    # [`ansible-navigator`](https://github.com/ansible/ansible-navigator)
    <br>

    In this challenge, we'll explore the [`ansible-navigator`](https://github.com/ansible/ansible-navigator) interface and highlight new features.

    **1.** First, run `ansible-navigator` with no additional options:
    ```
    ansible-navigator
    ```

    Now that you are in the `ansible-navigator` TUI, there are many sub-commands available to help in developing, testing and inspecting your local environment. By default, the `:welcome` subcommand has already been issued which shows a quick overview of available subcommands. Run `:help` to see more info.

    **2.** Try out the subcommand for displaying documentation of the ping module by issuing the following command in `ansible-navigator`:
    ```
    :doc ping
    ```

    You can exit the ansible-navigtor TUI by issuing the `:quit` command.

    **3.** Run your simple playbook again to ping localhost, but this time leave off the `-m stdout` option:
    ```
    ansible-navigator run ./test.yml
    ```
    You can also run playbooks from within the ansible-navigator TUI by simply issuing the run command with path to playbook: `:run ./test.yml`

    In general, navigating `ansible-navigator` is done by using the number keys to select an option and the <kbd>Esc</kbd> key to go to the previous screen.

    **4.** Explore the play that was run by pressing the number corresponding to that line. You should be taken to the next screen that will contain a list of the tasks that ran as a part of that play. Inspect the tasks by pressing the number of the corresponding line.

    ***
    *Wondering how to select a line with a number greater than 9?* Simply prepend the number with a colon. Example: To select line 15, you would issue the command `:15`.
    ***

    **5.** Select the gather_facts task by pressing <kbd>0</kbd> and issue the subcommand `:doc`

    Using `ansible-navigator` is very helpful for quickly referencing documentation for specific tasks while debugging playbooks.

    **6.** Finally, you can pass subcommands directly to `ansible-navigator` on the command line. Try getting docs on with `setup` module:
    ```
    ansible-navigator doc setup
    ```

    <br>

    ***
    Remember, if you ever get stuck in `ansible-navigator`, <kbd>Esc</kbd> will always bring you to the previous screen. Pressing <kbd>Esc</kbd> when there are no more screens left will exit `ansible-navigator`.
  tabs:
  - title: code-server
    type: service
    hostname: code-server
    path: /editor/?folder=vscode-remote%3A%2F%2F%2fhome%2Frhel
    port: 80
  difficulty: basic
  timelimit: 450
- slug: configure-ansible-navigator
  id: hggv2ubzmllg
  type: challenge
  title: Configuring common ansible-navigator options
  teaser: Let's take a look at common navigator settings!
  notes:
  - type: text
    contents: |-
      `ansible-navigator` has been introduced as a way to unify the development experience. For this reason, there are a lot of configration directives that can be customized for each developer/project.

      `ansible-navigator.yml` is the config file present in each project that will determine how automation is created and executed with `ansible-navigator`

      Let's take a look at some of these options.
  assignment: |-
    `ansible-navigator` has its own settings and can be configured on a per-project basis. This is useful if your projects span multiple execution environments, or require different ansible defaults, for example.

    Additionally, developers can use these settings to adapt `ansible-navigator` to their development styles, code editor/IDE, etc..

    Let's take a look at some of the common options.

    **1.** In the directory `/home/rhel` you should see a file called `ansible-navigator.yml`. Open it up and check out the contents. Notice that there are currently some execution environment and logging settings already there.

    Developers love the ability to not only run ansible-navigator within the integrated terminal, but I want to be able to pass task output back to my code editor for inspection.

    **2.** `ansible-navigator` can configure a preferred editor for the `:open` sub-command. Let's do that now. Open `ansible-navigator.yml` and set your preferred editor to the code-server instance in your environment. Do this by copying the following settings to the end of the file:
    ```

      editor:
        command: code-server {filename}
        console: false
    ```

    **3.** Execute your test playbook:
    ```
    ansible-navigator run ./test.yml
    ```

    **4.** Inspect the play by pressing <kbd>0</kbd>, inspect the first task by pressing <kbd>0</kbd> again and issue the subcommand `:open`.

    You should now have a new tab within your code editor with the output of that task as the file contents. `:open` works for any page within the navigator TUI and can be useful in creating playbooks.
  tabs:
  - title: code-server
    type: service
    hostname: code-server
    path: /editor/?folder=vscode-remote%3A%2F%2F%2fhome%2Frhel
    port: 80
  difficulty: basic
  timelimit: 450
- slug: ansible-navigator-using-execution-environments
  id: dilqtnpyq0ye
  type: challenge
  title: Using execution environments
  teaser: Configure navigator to use an execution environment
  assignment: |-
    Up to this point, `ansible-navigator` has been running with just the built in modules and executing without an execution environment.

    Let's see what happens when we change `ansible-navigator.yml` to use the default execution environment.

    **1.** Open `ansible-navigator.yml` and change `enabled: false` to `enabled: true` under the `execution-environment` settings block. The file should look like this:
    ```
    ---
    ansible-navigator:
      execution-environment:
        container-engine: podman
        image: ee-supported-rhel8:2.0.0
        enabled: true
        pull-policy: never

      playbook-artifact:
        save-as: /home/rhel/playbook-artifacts/{playbook_name}-artifact-{ts_utc}.json

      logging:
        level: debug

      editor:
        command: code-server {filename}
        console false
    ```

    **2.** Re-reun your test playbook:
    ```
    ansible-navigator run ./test.yml
    ```

    Notice that `ansible-navigator` knows that it should be using an execution environment but none are currently present. You should see a pull process happening now where an execution environment is being pulled from container registry. `ansible-navigator` can be configured in the same yaml file to pull from your own Private Automation Hub.

    **3.** Your `test.yml` file should have executed successfully. You can now use `ansible-navigator` to inspect this execution environment by issuing the `:collections` subcommand.

    **4.** While inspecting collections, there is a module in the `ansible.utils` collection called `fact_diff`. Locate the author of this module and remember the github handle associated with this person.
  tabs:
  - title: code-server
    type: service
    hostname: code-server
    path: /editor/?folder=vscode-remote%3A%2F%2F%2fhome%2Frhel
    port: 80
  difficulty: basic
  timelimit: 450
- slug: navigator-quiz
  id: kgbfxxvsvz43
  type: quiz
  title: Knowledge check
  teaser: Put your knowledge to the test!
  assignment: |-
    In the previous challenge, you were tasked with finding the github handle of the author of the `fact_diff` module contained in the `ansible.utils` collection. What was that handle?

    - @hardcider
    - @ianaboss
    - @osisupermodel
    - @cidrblock
  answers:
  - '@hardcidr'
  - '@IANAboss'
  - '@OSIsupermodel'
  - '@cidrblock'
  solution:
  - 3
  difficulty: basic
  timelimit: 60
checksum: "16967642467345356097"
