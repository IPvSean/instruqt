---
## devops-controller post AAP install tasks
##
# Tags:
##
- name: Configure localhost and instances
  hosts: localhost
  gather_facts: false

  vars:
    gcp_login: &gcp_login
      project: "{{ gcp_project }}"
      auth_kind: serviceaccount
      service_account_file: "{{ gcp_service_account_file }}"
    track_slug: devops-controller

  pre_tasks:
    - name: Include variable tasks
      vars:
        extra_vars:
          - name: track_slug
            env: TRACK_SLUG
          - name: gcp_service_account_file
            env: GCP_SERVICE_ACCOUNT_FILE
          - name: gcp_service_account
            env: GCP_SERVICE_ACCOUNT
          - name: gcp_instances
          - name: gcp_project
            env: GCP_PROJECT
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/60_check_vars.yml"
        apply:
          tags:
            - always
      tags:
        - always

  tasks:
    - name: Download and upgrade collections for install - {{ inventory_hostname }}
      vars:
        controller_collections:
          - ansible.workshops
          - google.cloud
          - ansible.posix
          - community.crypto
          - containers.podman
          - redhat_cop.controller_configuration
          - awx.awx
      ansible.builtin.command: "ansible-galaxy collection install {{ item }} --upgrade"
      loop: "{{ controller_collections }}"
      register: __collection_install
      changed_when: '"is already installed, skipping" not in __collection_install.stdout'
      when: (controller_collections is defined) and (controller_collections | length > 0)
      tags:
        - install-collections
        - controller-config

    # - name: Remove existing gcloud instances
    #   when: (gcp_instances is defined) and (gcp_instances | length > 0)
    #   tags:
    #     - delete-instances
    #   block:
    #     - name: Remove gcloud instances
    #       google.cloud.gcp_compute_instance:
    #         name: "{{ __remove_instances_job_async_item.name }}"
    #         state: absent
    #         zone: "{{ gcp_zone }}"
    #         <<: *gcp_login
    #       loop: "{{ gcp_instances }}"
    #       loop_control:
    #         loop_var: __remove_instances_job_async_item
    #         label: "{{ __remove_instances_job_async_item.name }}"
    #       async: 1000
    #       poll: 0
    #       register: __remove_instances_job_async
    #       changed_when: not __remove_instances_job_async.changed

    #     - name: "Remove existing gcloud instances | Wait for finish the instance deletion"
    #       ansible.builtin.async_status:
    #         jid: "{{ __remove_instances_job_async_result_item.ansible_job_id }}"
    #       retries: 60
    #       delay: 1
    #       loop: "{{ __remove_instances_job_async.results }}"
    #       loop_control:
    #         loop_var: __remove_instances_job_async_result_item
    #         label: "{{ __remove_instances_job_async_result_item.__remove_instances_job_async_item.name }}"
    #       until: __remove_instances_job_async_result.finished
    #       register: __remove_instances_job_async_result
    #       when: __remove_instances_job_async_result_item.ansible_job_id is defined

    - name: Create gcloud instances
      when: (gcp_instances is defined) and (gcp_instances | length > 0)
      tags:
        - create-instances
      block:
        - name: Create new gcloud instances
          google.cloud.gcp_compute_instance:
            name: "{{ __create_instances_job_async_item.name }}"
            machine_type: "{{ __create_instances_job_async_item.machine_type }}"
            labels: "{{ __create_instances_job_async_item.labels | default(omit) }}"
            tags: "{{ __create_instances_job_async_item.tags | default(omit) }}"
            state: present
            zone: "{{ gcp_zone }}"
            <<: *gcp_login
            network_interfaces:
              - access_configs:
                - name: External NAT # yamllint disable-line rule:indentation
                  type: ONE_TO_ONE_NAT
            disks:
              - auto_delete: true
                boot: true
                device_name: "{{ __create_instances_job_async_item.name }}"
                initialize_params:
                  source_image: "projects/{{ gcp_project }}/global/images/{{ __create_instances_job_async_item.source_image }}"
                  disk_size_gb: 20
                  disk_type: pd-balanced
          loop: "{{ gcp_instances }}"
          loop_control:
            loop_var: __create_instances_job_async_item
            label: "{{ __create_instances_job_async_item.name }}"
          async: 1000
          poll: 0
          register: __create_instances_job_async
          changed_when: not __create_instances_job_async.changed

        - name: Create new gcloud instances | Async
          ansible.builtin.async_status:
            jid: "{{ __create_instances_job_async_result_item.ansible_job_id }}"
          retries: 60
          delay: 1
          loop: "{{ __create_instances_job_async.results }}"
          loop_control:
            loop_var: __create_instances_job_async_result_item
            label: "{{ __create_instances_job_async_result_item.__create_instances_job_async_item.name }}"
          until: __create_instances_job_async_result.finished
          register: __create_instances_job_async_result
          when: __create_instances_job_async_result_item.ansible_job_id is defined
      rescue:
        - name: Rescue - remove gcloud instances
          google.cloud.gcp_compute_instance:
            name: "{{ __remove_instances_rescue_item.name }}"
            state: absent
            zone: "{{ gcp_zone }}"
            <<: *gcp_login
          loop: "{{ gcp_instances }}"
          loop_control:
            loop_var: __remove_instances_rescue_item
        - name: Print error message
          ansible.builtin.fail:
            msg: |
              "Rescue - Unable to create gcloud instances.
              "{{ __create_instances_job_async_result }}"

    - name: Get gcp node instance info
      google.cloud.gcp_compute_instance_info: # noqa syntax-check
        filters:
          - labels.role = "{{ track_slug }}"
        zone: "{{ gcp_zone }}"
        <<: *gcp_login
      register: __mesh_node_instance_info
      tags:
        - create-instances

    - name: Wait for gcloud instances to start
      when:
        - (__mesh_node_instance_info.resources is defined) and (__mesh_node_instance_info.resources | length > 0)
        - (gcp_instances is defined) and (gcp_instances | length > 0)
      tags:
        - create-instances
      block:
        - name: Wait for gcloud instances - SSH
          ansible.builtin.wait_for:
            host: "{{ __instances_ssh_async_item.networkInterfaces[0].accessConfigs[0].natIP }}"
            port: 22
            delay: 5
            timeout: 120
          loop: "{{ __mesh_node_instance_info.resources }}"
          loop_control:
            loop_var: __instances_ssh_async_item
            label: "{{ __instances_ssh_async_item.name }}"
          async: 1000
          poll: 0
          register: __instances_ssh_async
          changed_when: not __instances_ssh_async.changed

        - name: "Wait for gcloud instances - SSH | Wait for SSH"
          ansible.builtin.async_status:
            jid: "{{ __instances_ssh_async_result_item.ansible_job_id }}"
          retries: 35
          delay: 5
          loop: "{{ __instances_ssh_async.results }}"
          loop_control:
            loop_var: __instances_ssh_async_result_item
            label: "{{ __instances_ssh_async_result_item.__instances_ssh_async_item.name }}"
          until: __instances_ssh_async_result.finished
          register: __instances_ssh_async_result
          when: __instances_ssh_async_result_item.ansible_job_id is defined
      rescue:
        - name: Print error message
          ansible.builtin.fail:
            msg: |
              "Rescue - Unable to connect to GCloud instances SSH.
              "{{ __instances_ssh_async_result }}"

        - name: Rescue - remove gcloud instances
          google.cloud.gcp_compute_instance:
            name: "{{ __remove_instances_rescue_item.instance_name }}"
            state: absent
            zone: "{{ gcp_zone }}"
            <<: *gcp_login
          loop: "{{ gcp_instances }}"
          loop_control:
            loop_var: __remove_instances_rescue_item

    - name: Add gcp controller hosts to inventory
      ansible.builtin.add_host:
        name: "{{ item.name }}"
        groups: "automationcontroller"
        ansible_host: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
      args: "{{ gcp_inventory_host_vars | default(omit) }}"
      loop: "{{ __mesh_node_instance_info.resources }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.labels["mesh-type"] == "controller"
        - (__mesh_node_instance_info.resources is defined) and (__mesh_node_instance_info.resources | length > 0)
      tags:
        - create-instances

    - name: Remove previous known_hosts keys - {{ inventory_hostname }}
      ansible.builtin.known_hosts:
        name: "{{ item.networkInterfaces[0].accessConfigs[0].natIP }}"
        state: absent
      loop: "{{ __mesh_node_instance_info.resources }}"
      loop_control:
        label: "{{ item.name }}"
      when: (__mesh_node_instance_info.resources is defined) and (__mesh_node_instance_info.resources | length > 0)
      tags:
        - create-instances
        - ssh-key

    - name: Add keys to known_hosts file - {{ inventory_hostname }}
      ansible.builtin.known_hosts:
        name: "{{ hostvars[item].ansible_host }}"
        state: present
        key: "{{ lookup('ansible.builtin.pipe', 'ssh-keyscan {{ hostvars[item].ansible_host }}') }}"
        hash_host: true
      loop: "{{ query('inventory_hostnames', 'all') }}"

    - name: Create install SSH key
      when: (__mesh_node_instance_info.resources is defined) and (__mesh_node_instance_info.resources | length > 0)
      tags:
        - create-instances
      block:
        - name: Create temp dir for ssh keys
          ansible.builtin.tempfile:
            state: directory
            prefix: instruqt_ssh_
          register: _ssh_tempdir

        - name: Generate temp OpenSSH key pair for nodes
          community.crypto.openssh_keypair:
            path: "{{ _ssh_tempdir.path }}/instruqt_lab"
            force: true

# Common configuration tasks
- name: Configure common tasks on all hosts
  hosts: all
  become: true
  gather_facts: true

  pre_tasks:
    - name: Include variable tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/60_check_vars.yml"
        apply:
          tags:
            - always
      tags:
        - always
  tasks:
    - name: Include common user tasks
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/5_configure_users.yml"
      tags:
        - controller-install

    - name: Add instruqt_lab ssh key to authorized keys
      ansible.posix.authorized_key:
        user: "{{ item }}"
        state: present
        key: "{{ lookup('file', hostvars.localhost._ssh_tempdir.path + '/instruqt_lab.pub') }}"
        comment: "Instruqt lab key"
      loop:
        - "{{ ansible_user }}"
        - "{{ ansible_user_id }}" # root because of become: true
      tags:
        - ssh-key
        - controller-install
        - create-instances

# Controller config
- name: Configure controller and containers
  hosts: automationcontroller
  become: true
  gather_facts: true
  # strategy: debug
  
  pre_tasks:
    - name: Include variable tasks
      vars:
        extra_vars:
          - name: lab_containers
      ansible.builtin.include_tasks:
        file: "{{ playbook_dir }}/common/60_check_vars.yml"
        apply:
          tags:
            - always
      tags:
        - always

  tasks:
    - name: Copy instruqt_lab ssh keys to controller - {{ ansible_user }}
      ansible.builtin.copy:
        src: "{{ hostvars.localhost._ssh_tempdir.path }}/"
        dest: "/home/{{ ansible_user }}/.ssh/"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0600"
      when: (hostvars.localhost._ssh_tempdir.path is defined) and (hostvars.localhost._ssh_tempdir.path | length > 0)
      tags:
        - controller-install
        - ssh-key

    - name: Permit key-based root login for SSH
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        mode: 0600
        owner: root
        group: root
        regexp: '^PermitRootLogin'
        line: PermitRootLogin without-password

    - name: Restart SSH service
      ansible.builtin.service:
        name: sshd
        state: restarted

    - name: Setup containers
      when: lab_containers is defined and lab_containers | length > 0
      tags:
        - create-containers
      block:
        - name: Start custom containers
          containers.podman.podman_container:
            name: "{{ __start_containers_async_item.name | default(omit) }}"
            image: "{{ __start_containers_async_item.image | default(omit) }}"
            memory: "{{ __start_containers_async_item.memory | default(omit) }}"
            privileged: "{{ __start_containers_async_item.privileged | default(false) }}"
            publish: "{{ __start_containers_async_item.publish | default(omit) }}"
            volume: "{{ __start_containers_async_item.volume | default(omit) }}"
            etc_hosts: "{{ __start_containers_async_item.etc_hosts | default(omit) }}"
            ip: "{{ __start_containers_async_item.ip | default(omit) }}"
            network: "{{ __start_containers_async_item.network | default(omit) }}"
            state: "{{ __start_containers_async_item.state | default('started') }}"
            env: "{{ __start_containers_async_item.env | default(omit) }}"
          async: 1000
          poll: 0
          loop: "{{ lab_containers }}"
          loop_control:
            loop_var: __start_containers_async_item
            label: "{{ __start_containers_async_item.name }}"
          register: __start_containers_async
          changed_when: not __start_containers_async.changed

        - name: Start custom containers | Async
          ansible.builtin.async_status:
            jid: "{{ __start_containers_async_result_item.ansible_job_id }}"
          retries: 60
          delay: 1
          loop: "{{ __start_containers_async.results }}"
          loop_control:
            loop_var: __start_containers_async_result_item
            label: "{{ __start_containers_async_result_item.__start_containers_async_item.name }}"
          until: __start_containers_async_result.finished
          register: __start_containers_async_result
          when: __start_containers_async_result_item.ansible_job_id is defined

        - name: Add custom containers to /etc/hosts
          ansible.builtin.lineinfile:
            path: /etc/hosts
            mode: 0644
            state: present
            line: "{{ __hosts_file_item.ip }} {{ __hosts_file_item.name }}"
          loop: "{{ lab_containers }}"
          loop_control:
            loop_var: __hosts_file_item
            label: "{{ __hosts_file_item.name }}"

        - name: Wait for container services to start
          ansible.builtin.wait_for:
            host: "{{  __containers_start_async_item.name }}"
            port: "{{  __containers_start_async_item.listen_port }}"
            delay: 1
            timeout: 120
          loop: "{{ lab_containers }}"
          loop_control:
            loop_var: __containers_start_async_item
            label: "{{ __containers_start_async_item.name }}"
          async: 1000
          poll: 0
          register: __containers_start_async
          changed_when: not __containers_start_async.changed

        - name: Wait for container services to start | Async
          ansible.builtin.async_status:
            jid: "{{ __containers_start_async_result_item.ansible_job_id }}"
          retries: 90
          delay: 1
          loop: "{{ __containers_start_async.results }}"
          loop_control:
            loop_var: __containers_start_async_result_item
            label: "{{ __containers_start_async_result_item.__containers_start_async_item.name }}"
          until: __containers_start_async_result.finished
          register: __containers_start_async_result
          when: __containers_start_async_result_item.ansible_job_id is defined

        - name: Add custom containers to inventory
          ansible.builtin.add_host:
            name: "{{ __add_containers_item.name }}"
            groups: "{{ __add_containers_item.groups | default(omit) }}"
          args: "{{ __add_containers_item.args | default(omit) }}"
          loop: "{{ lab_containers }}"
          loop_control:
            loop_var: __add_containers_item
            label: "{{ __add_containers_item.name }}"

    - name: Configure Gitea container
      module_defaults:
        ansible.builtin.uri:
          force_basic_auth: true
          url_username: "{{ student_user }}"
          url_password: "{{ student_password }}"
          validate_certs: false
          body_format: json
      when: ('"containers" in groups' and '"gitea" in inventory_hostnames["containers"]')
      tags:
        - gitea
      block:
        - name: Create Gitea repo - {{ gitea_repo_name }}
          ansible.builtin.uri:
            url: "{{ gitea_app_url }}/api/v1/user/repos"
            method: POST
            body:
              name: "{{ gitea_repo_name }}"
              auto_init: false
              private: false
            status_code: [201,409]
          changed_when: (__create_user.msg is defined and '"OK" in __create_user.msg')

        - name: Create repo webhook - {{ jenkins_url }}
          ansible.builtin.uri:
            url: "{{ gitea_app_url }}/api/v1/repos/{{ student_user }}/{{ gitea_repo_name }}/hooks"
            method: POST
            body:
              type: gitea
              config:
                content_type: json
                url: "{{ jenkins_url }}/gitea-webhook/post"
              active: true
              events:
                - push
            status_code: [201,409]
          changed_when: (__create_user.msg is defined and '"OK" in __create_user.msg')

        - name: Create repo user - {{ jenkins_user }}
          ansible.builtin.uri:
            url: "{{ gitea_app_url }}/api/v1/admin/users"
            method: POST
            body:
              email: "{{ jenkins_user }}@acme.com"
              must_change_password: false
              password: "{{ jenkins_password }}"
              username: "{{ jenkins_user }}"
            status_code: [201,409,422]
            url_username: "{{ gitea_admin_username }}"
            url_password: "{{ gitea_admin_password }}"
          register: __create_user
          changed_when: (__create_user.json.message is defined and '"user already exists" not in __create_user.json.message') or
                        (__create_user.msg is defined and '"OK" in __create_user.msg')

        - name: Add collaborator - {{ jenkins_user }} => {{ gitea_repo_name }}
          ansible.builtin.uri:
            url: "{{ gitea_app_url }}/api/v1/repos/{{ student_user }}/{{ gitea_repo_name }}/collaborators/{{ jenkins_user }}"
            method: PUT
            body:
              permission: Admin
            status_code: [204,409]

  # Setup student git repo
    - name: Configure local repo - {{ ansible_user }}
      tags:
        - controller-config
      become_user: "{{ ansible_user }}"
      block:
        - name: Download setup scripts to controller tmp directory
          ansible.builtin.subversion:
            repo: "{{ scripts_download_url }}"
            dest: "/tmp/setup-scripts/{{ track_slug }}"
            export: true
            force: true
          become_user: root

        - name: Recreate repo dir - {{ gitea_repo_name }}
          ansible.builtin.file:
            path: "/home/{{ ansible_user }}/{{ gitea_repo_name }}"
            state: "{{ item }}"
          loop:
            - absent
            - directory

        - name: Extract initial repo files
          ansible.builtin.unarchive:
            src: "/tmp/setup-scripts/{{ track_slug }}/files/acme_repo.tar.gz"
            dest: "/home/{{ ansible_user }}/{{ gitea_repo_name }}"
            creates: "/home/{{ ansible_user }}/{{ gitea_repo_name }}/app"
            remote_src: true
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"

        - name: Initialise track repo - {{ gitea_repo_name }}
          ansible.builtin.command:
            cmd: /usr/bin/git init
            chdir: "/home/{{ ansible_user }}/{{ gitea_repo_name }}"
            creates: "/{{ gitea_repo_name }}/.git" 

        - name: Add git configurations - {{ gitea_repo_name }}
          ansible.builtin.template:
            src: "{{ track_slug }}_gitconfig.j2"
            dest: "/home/{{ ansible_user }}/{{ gitea_repo_name }}/.git/config"

        - name: Store repo credentials in git-creds file
          ansible.builtin.copy:
            dest: /tmp/git-creds
            content: "{{ gitea_protocol }}://{{ student_user | urlencode }}:{{ student_password | urlencode }}@{{ gitea_hostname }}:{{ gitea_http_port }}"
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: 0644

        - name: Push initial commit to repo
          ansible.builtin.command:
            cmd: "{{ item }}"
            chdir: "/home/{{ ansible_user }}/{{ gitea_repo_name }}"
          register: __output
          changed_when: __output.rc == 0
          loop:
            - "git checkout -b main"
            - "git add ."
            - "git commit -m'Initial commit'"
            - "git push -u origin main --force"

    # Jenkins
    - name: Configure Jenkins
      when: ('"containers" in groups' and '"jenkins" in inventory_hostnames["containers"]')
      module_defaults:
        ansible.builtin.uri:
            url_username: "{{ student_user }}"
            url_password: "{{ student_password }}"
            force_basic_auth: true
            return_content: true
            validate_certs: false 
      tags:
        - jenkins
      block:
        - name: Generate Jenkins CSRF token - {{ student_user }}
          ansible.builtin.uri:
            method: GET
            url: "{{ jenkins_url }}/crumbIssuer/api/json"
          until: __jenkins_crumb is success
          retries: 20
          delay: 1
          register: __jenkins_crumb

        - name: Create Jenkins user - {{ jenkins_user }}
          ansible.builtin.uri:
            method: POST
            url: "{{ jenkins_url }}/securityRealm/createAccountByAdmin"
            headers:
              Cookie: "{{ __jenkins_crumb.cookies_string }}"
              Jenkins-Crumb: "{{ __jenkins_crumb.json.crumb }}"
            follow_redirects: all
            body_format: form-urlencoded
            body:
              username: "{{ jenkins_user }}"
              password1: "{{ jenkins_password }}"
              password2: "{{ jenkins_password }}"
              fullname: "{{ jenkins_user }}"
              email: "{{ jenkins_user }}@acme.com"

        - name: Read Jenkins Job template files
          ansible.builtin.slurp:
            src: "{{ __jenkins_job_slurp_item.template_file }}"
          register: __jenkins_job_slurp   
          loop: "{{ jenkins_jobs }}"
          loop_control:
            loop_var: __jenkins_job_slurp_item
            label: "{{ __jenkins_job_slurp_item.name }}"
          when: jenkins_jobs is defined and jenkins_jobs | length > 0
          
        - name: Create Jenkins jobs
          ansible.builtin.uri:
            method: POST
            url: "{{ jenkins_url }}/createItem/api/json?name={{ item.__jenkins_job_slurp_item.name }}"
            headers:
              Content-Type: text/xml
              Cookie: "{{ __jenkins_crumb.cookies_string }}"
              Jenkins-Crumb: "{{ __jenkins_crumb.json.crumb }}"
            body: "{{ item.content | b64decode }}"
            remote_src: true
            status_code: [200,400]
          loop: "{{ __jenkins_job_slurp.results }}"
          register: __jenkins_jobs_output
          when: jenkins_jobs is defined and jenkins_jobs | length > 0
